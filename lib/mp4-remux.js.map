{"version":3,"file":"mp4-remux.js","sources":["../src/boxes.class/Mp4Box.class.ts","../src/boxes.class/trex.ts","../src/boxes.class/trun.ts","../src/boxes.class/tfdt.ts","../src/boxes.class/tfhd.ts","../src/boxes.class/traf.ts","../src/boxes.class/mfhd.ts","../src/boxes.class/udta.ts","../src/boxes.class/mdia.ts","../src/boxes.class/ftyp.ts","../src/boxes.class/free.ts","../src/boxes.class/moov.ts","../src/boxes.class/moof.ts","../src/boxes.class/sidx.ts","../src/boxes.class/mdat.ts","../src/boxes.class/mvhd.ts","../src/boxes.class/mvex.ts","../src/boxes.class/tkhd.ts","../src/boxes.class/trak.ts","../src/boxes.class/edts.ts","../src/Mp4Stream.class.ts","../src/index.ts"],"sourcesContent":["import { Box } from \"./types\";\nimport * as Boxes from \".\";\n\nexport class Mp4Box {\n  stream: Uint8Array = new Uint8Array();\n  dv: DataView = new DataView(new Uint8Array().buffer);\n  boxs: Box[] = [];\n  boxPos = 0; // 记录元数据和盒子数据的偏差\n\n  constructor(buf: Uint8Array) {\n    this.stream = buf;\n    this.dv = new DataView(buf.buffer);\n  }\n\n  set size(value: number) {\n    this.writeUint(4, value);\n  }\n  get size() {\n    return this.readUint(4);\n  }\n  get type() {\n    return this.readString(4, 4);\n  }\n\n  /**\n   * 获取当前 box 的 binary\n   */\n  get raw() {\n    if (this.boxPos) {\n      let size = this.boxPos;\n      const bufs = this.boxs.map((item) => {\n        const boxRaw = item.raw;\n        size += boxRaw.length;\n        return boxRaw;\n      });\n      this.size = size;\n      const base = this.stream.slice(0, this.boxPos);\n\n      // 将 Uint8Array[] 合并成一个\n      const nbuf = new Uint8Array(size);\n      let pos = 0;\n      for (const item of [base, ...bufs]) {\n        nbuf.set(item, pos);\n        pos += item.length;\n      }\n      return nbuf;\n    }\n\n    return this.stream;\n  }\n  writeUint(size: 1 | 2 | 4, val: number, pos = 0) {\n    const view = this.dv;\n    switch (size) {\n      case 1:\n        view.setUint8(pos, val);\n        break;\n      case 2:\n        view.setUint16(pos, val);\n        break;\n      case 4:\n        view.setUint32(pos, val);\n        break;\n    }\n  }\n  writeInt(size: 1 | 2 | 4, val: number, pos = 0) {\n    const view = this.dv;\n    switch (size) {\n      case 1:\n        view.setInt8(pos, val);\n        break;\n      case 2:\n        view.setInt16(pos, val);\n        break;\n      case 4:\n        view.setInt32(pos, val);\n        break;\n    }\n  }\n\n  readInt(size: 1 | 2 | 4 = 4, pos = 0) {\n    const view = this.dv;\n    switch (size) {\n      case 1:\n        return view.getInt8(pos);\n      case 2:\n        return view.getInt16(pos);\n      case 4:\n        return view.getInt32(pos);\n    }\n  }\n\n  // use dataView to Get Unsigned Int\n  readUint(size: 1 | 2 | 4, pos = 0) {\n    const view = this.dv;\n    switch (size) {\n      case 1:\n        return view.getUint8(pos);\n      case 2:\n        return view.getUint16(pos);\n      case 4:\n        return view.getUint32(pos);\n    }\n  }\n  /**\n   * Read string by char code from Uint8Array\n   * @param size\n   */\n  readString(size: 4, pos = 0) {\n    let s = \"\";\n    for (let i = 0; i < size; i++) {\n      s += String.fromCharCode(this.readUint(1, pos + i));\n    }\n    return s;\n  }\n\n  parse(boxPos: number) {\n    this.boxPos = boxPos;\n    let pos = boxPos;\n    while (pos <= this.stream.length - 8) {\n      const size = this.readUint(4, pos);\n      const type = this.readString(4, 4 + pos);\n      if (size <= this.stream.length) {\n        const tBuf = this.stream.slice(pos, pos + size);\n\n        const BoxClass = Boxes[type as keyof typeof Boxes] || Boxes.free;\n        this.boxs.push(new BoxClass(tBuf));\n      }\n      pos += size;\n    }\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class trex extends Mp4Box {\n\n  get version() {\n    return this.readUint(1, 8);\n  }\n  get track_id():number{\n    return this.readUint(4,12);\n  }\n  set track_id(value){\n    this.writeUint(4,value,12);\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class trun extends Mp4Box {\n  get sample_count() {\n    return this.readUint(4, 12);\n  }\n  get data_offset() {\n    return this.readInt(4, 16);\n  }\n  set data_offset(val) {\n    this.writeInt(4, val, 16);\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class tfdt extends Mp4Box {}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class tfhd extends Mp4Box {\n  get version() {\n    return this.readUint(1, 8);\n  }\n  get track_id():number{\n    return this.readUint(4,12);\n  }\n  set track_id(value){\n    this.writeUint(4,value,12);\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\nimport { trun, tfhd } from \".\";\n\nexport class traf extends Mp4Box {\n  constructor(buf: Uint8Array) {\n    super(buf);\n    this.parse(8);\n  }\n  get tfhd() {\n    return this.boxs.find((box) => box instanceof tfhd) as tfhd;\n  }\n  get trun() {\n    return this.boxs.find((box) => box instanceof trun) as trun;\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class mfhd extends Mp4Box {\n  get sequence_number() {\n    return this.readUint(4, 12);\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class udta extends Mp4Box {}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class mdia extends Mp4Box {}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class ftyp extends Mp4Box {}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class free extends Mp4Box {}\n","import { Mp4Box } from \"./Mp4Box.class\";\nimport {mvhd,mvex,trak} from \".\";\n\nexport class moov extends Mp4Box {\n  constructor(buf: Uint8Array) {\n    super(buf);\n    this.parse(8);\n  }\n\n  get mvhd() {\n    return this.boxs.find((box) => box instanceof mvhd) as mvhd;\n  }\n  get mvex(){\n    return this.boxs.find((box) => box instanceof mvex) as mvex;\n  }\n  get trak(){\n    return this.boxs.find((box) => box instanceof trak) as trak\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\nimport { mfhd, traf } from \"./\";\n\nexport class moof extends Mp4Box {\n  constructor(buf: Uint8Array) {\n    super(buf);\n    this.parse(8);\n  }\n  get mfhd(){\n    return this.boxs.find((box) => box instanceof mfhd) as mfhd\n  }\n  get traf(){\n    return this.boxs.find((box) => box instanceof traf) as traf\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class sidx extends Mp4Box {\n  get version() {\n    return this.readUint(1, 8);\n  }\n  get reference_ID() {\n    return this.readUint(4, 12);\n  }\n  get timescale() {\n    return this.readUint(4, 16);\n  }\n  get reserved() {\n    let offset = 8 + 20;\n    if (this.version !== 0) {\n      offset = 16 + 20;\n    }\n    return this.readUint(2, offset);\n  }\n  get reference_count() {\n    let offset = 8 + 20;\n    if (this.version !== 0) {\n      offset = 16 + 20;\n    }\n    offset += 2;\n    return this.readUint(2, offset);\n  }\n  get refList() {\n    let offset = 8 + 24;\n    if (this.version !== 0) {\n      offset = 16 + 24;\n    }\n    const refrenceCount = this.reference_count;\n    const resList = [];\n    for (let i = 0; i < refrenceCount; i++) {\n      const pos = offset + i * 12; // Position\n      let tmp_32 = this.readUint(4, pos);\n      const reference_type = (tmp_32 >> 31) & 0x1;\n      const referenced_size = tmp_32 & 0x7fffffff;\n      const subsegment_duration = this.readUint(4, pos + 4);\n      tmp_32 = this.readUint(4, pos + 8);\n      const starts_with_SAP = (tmp_32 >> 31) & 0x1;\n      const SAP_type = (tmp_32 >> 28) & 0x7;\n      const SAP_delta_time = tmp_32 & 0xfffffff;\n      resList.push({\n        reference_type,\n        referenced_size,\n        subsegment_duration,\n        starts_with_SAP,\n        SAP_type,\n        SAP_delta_time,\n      });\n    }\n    return resList;\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class mdat extends Mp4Box {\n  push(value: Uint8Array) {\n    // 向 stream 追加数据\n\n    const newBuf = new Uint8Array(this.stream.length + value.length);\n    newBuf.set(this.stream);\n    newBuf.set(value, this.stream.length);\n    this.stream = newBuf;\n    this.dv = new DataView(this.stream.buffer);\n    this.size = newBuf.length;\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class mvhd extends Mp4Box {\n\n  get version() {\n    return this.readUint(1, 8);\n  }\n\n  get next_track_ID(){\n    if(this.version === 0){\n      return this.readUint(4,104);\n    }else{\n      return this.readUint(4,116);\n    }\n  }\n  set next_track_ID(value){\n    if(this.version === 0){\n      this.writeUint(4,value,104);\n    }else{\n      this.writeUint(4,value,116);\n    }\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\nimport {trex} from \"./\";\n\nexport class mvex extends Mp4Box {\n  constructor(buf: Uint8Array) {\n    super(buf);\n    this.parse(8);\n\n\n  }\n  get trex(){\n    return this.boxs.find((box) => box instanceof trex) as trex\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class tkhd extends Mp4Box {\n  get version() {\n    return this.readUint(1, 8);\n  }\n\n  get track_id():number{\n    if(this.version === 1){\n      return this.readUint(4, 28);\n    }else{\n      return this.readUint(4,20);\n    }\n  }\n  set track_id(value){\n    if(this.version === 1){\n      this.writeUint(4,value,28);\n    }else{\n      this.writeUint(4,value,20);\n    }\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\nimport { tkhd } from \"./tkhd\";\n\nexport class trak extends Mp4Box {\n  constructor(buf: Uint8Array) {\n    super(buf);\n    this.parse(8);\n  }\n  get tkhd(): tkhd {\n    return this.boxs.find((box) => box instanceof tkhd) as tkhd;\n  }\n}\n","import { Mp4Box } from \"./Mp4Box.class\";\n\nexport class edts extends Mp4Box {}\n","import * as Boxes from \"./boxes.class\";\nimport { Box } from \"./boxes.class/types\";\n\nexport class Mp4Stream {\n  stream: Uint8Array = new Uint8Array();\n  dv: DataView = new DataView(new Uint8Array().buffer);\n  boxs: Box[] = [];\n  isEnd = false;\n\n  get sidx() {\n    return this.boxs.find((box) => box instanceof Boxes.sidx) as Boxes.sidx;\n  }\n  get moov() {\n    return this.boxs.find((box) => box instanceof Boxes.moov) as Boxes.moov;\n  }\n\n  push(value: Uint8Array) {\n    const newBuf = new Uint8Array(this.stream.length + value.length);\n    newBuf.set(this.stream);\n    newBuf.set(value, this.stream.length);\n    this.stream = newBuf;\n    this.dv = new DataView(this.stream.buffer);\n  }\n\n  /**\n   * 将stream 截断，把pos前的数据返回，然后更新dataView\n   * @param pos\n   */\n  slice(pos: number) {\n    const sliceBuf = this.stream.slice(0, pos);\n    const newBuf = new Uint8Array(this.stream.length - pos);\n    newBuf.set(this.stream.slice(pos));\n    this.stream = newBuf;\n    this.dv = new DataView(this.stream.buffer);\n    return sliceBuf;\n  }\n  // use dataView to Get Unsigned Int\n  readUint(size: 1 | 2 | 4, pos = 0) {\n    const view = this.dv;\n    switch (size) {\n      case 1:\n        return view.getUint8(pos);\n      case 2:\n        return view.getUint16(pos);\n      case 4:\n        return view.getUint32(pos);\n    }\n  }\n  /**\n   * Read string by char code from Uint8Array\n   * @param size\n   */\n  readString(size: 4, pos = 0) {\n    let s = \"\";\n    for (let i = 0; i < size; i++) {\n      s += String.fromCharCode(this.readUint(1, pos + i));\n    }\n    return s;\n  }\n  parse() {\n    // 检查this.stream 的长度是否足够 2*4*8\n    if (this.stream.length < 8) {\n      return; // Not Enough\n    }\n\n    const size = this.readUint(4);\n    const type = this.readString(4, 4);\n\n    if (size <= this.stream.length) {\n      const tBuf = this.slice(size);\n\n      const BoxClass = Boxes[type as keyof typeof Boxes] || Boxes.free;\n      this.boxs.push(new BoxClass(tBuf));\n\n      this.parse(); // 继续向后解析\n    }\n  }\n\n  end() {\n    this.isEnd = true;\n  }\n}\n","import { Mp4Stream } from \"./Mp4Stream.class\";\nimport * as Boxes from \"./boxes.class\";\n\nexport default function remux(vs: ReadableStream, as: ReadableStream) {\n  //  读取两个stream的数据\n  const videoReader = vs.getReader();\n  const audioReader = as.getReader();\n\n  const videoStream = new Mp4Stream();\n  const audioStream = new Mp4Stream();\n\n  const { readable, writable } = new TransformStream();\n  const writer = writable.getWriter();\n\n  let status = -1;\n\n  function callWrite(buf: Uint8Array) {\n    writer.write(buf);\n  }\n\n  async function checkStream() {\n    if (status === -1) {\n      // 合并 moov 中的 track 信息\n      const videoMoov = videoStream.moov;\n      const audioMoov = audioStream.moov;\n      if (videoMoov && audioMoov) {\n\n        const videoMvex = videoMoov.mvex;\n        const audioMvex = audioMoov.mvex;\n        if (videoMvex && audioMvex) {\n          const videoTrex = videoMvex.trex;\n          const audioTrex = audioMvex.trex;\n\n          videoTrex.track_id = 1;\n          audioTrex.track_id = 2;\n\n          // console.log(videoMvex, audioMvex);\n          videoMvex.boxs = [];\n          videoTrex && videoMvex.boxs.push(videoTrex);\n          audioTrex && videoMvex.boxs.push(audioTrex);\n        }\n\n        const videoTrak = videoMoov.trak;\n        const audioTrak = audioMoov.trak;\n        if (videoTrak && audioTrak) {\n          videoTrak.tkhd.track_id = 1;\n          audioTrak.tkhd.track_id = 2;\n\n          videoMoov.boxs.push(audioTrak);\n          for (const item of videoStream.boxs) {\n            callWrite(item.raw);\n            if (item === videoMoov) {\n              break;\n            }\n          }\n          status = 1;\n        }\n      }\n    }\n\n    // 需要先有 sidx\n    if (!videoStream.sidx || !audioStream.sidx) {\n      return;\n    }\n\n    if (status !== -1) {\n      const videoMaxIndex = videoStream.sidx.reference_count;\n      const audioMaxIndex = audioStream.sidx.reference_count;\n      if (status <= videoMaxIndex && status <= audioMaxIndex) {\n        // 合并\n\n        // Step1 获取需要的分片数据\n        const videoMoof = videoStream.boxs.find((item) => {\n          return (\n            item instanceof Boxes.moof && item?.mfhd.sequence_number === status\n          );\n        }) as Boxes.moof;\n        const audioMoof = audioStream.boxs.find((item) => {\n          return (\n            item instanceof Boxes.moof && item?.mfhd.sequence_number === status\n          );\n        }) as Boxes.moof;\n        const videoData = videoMoof && (videoStream.boxs[videoStream.boxs.indexOf(videoMoof) + 1] as Boxes.mdat);\n        const audioData = audioMoof && (audioStream.boxs[audioStream.boxs.indexOf(audioMoof) + 1] as Boxes.mdat);\n\n        if (videoMoof && videoData && audioMoof && audioData) {\n          // 处理合并流程\n          const videoTraf = videoMoof.traf;\n          const audioTraf = audioMoof.traf;\n\n          videoTraf.tfhd.track_id = 1;\n          audioTraf.tfhd.track_id = 2;\n          if (videoTraf?.trun && audioTraf?.trun) {\n            const audioTrafSize = audioTraf.size;\n            const videoMoofSize = videoMoof.size;\n            const videoDataSize = videoData.size;\n            videoTraf.trun.data_offset = videoMoofSize + audioTrafSize + 8;\n            audioTraf.trun.data_offset = videoMoofSize + audioTrafSize + videoDataSize;\n\n            videoMoof.boxs.push(audioTraf);\n\n            callWrite(videoMoof.raw);\n\n            // 处理 mdat 合并\n            videoData.push(audioData.raw.slice(8));\n            callWrite(videoData.raw);\n\n            // 释放存储空间\n            videoStream.boxs = videoStream.boxs.filter((item) => item !== videoMoof);\n            videoStream.boxs = videoStream.boxs.filter((item) => item !== videoData);\n            audioStream.boxs = audioStream.boxs.filter((item) => item !== audioMoof);\n            audioStream.boxs = audioStream.boxs.filter((item) => item !== audioData);\n\n            status += 1;\n            checkStream();\n          }\n        }\n      } else if (status > videoMaxIndex && status <= audioMaxIndex) {\n        // 追加 audio\n        const audioMoof = audioStream.boxs.find((item) => {\n          return (\n            item instanceof Boxes.moof && item?.mfhd.sequence_number === status\n          );\n        }) as Boxes.moof;\n        audioMoof.traf.tfhd.track_id = 2;\n        const audioData = audioMoof && (audioStream.boxs[audioStream.boxs.indexOf(audioMoof) + 1] as Boxes.mdat);\n        if (audioMoof && audioData) {\n          callWrite(audioMoof.raw);\n          callWrite(audioData.raw);\n          status += 1;\n          checkStream();\n        }\n      } else if (status > audioMaxIndex && status <= videoMaxIndex) {\n        // 追加 Video\n        const videoMoof = videoStream.boxs.find((item) => {\n          return (\n            item instanceof Boxes.moof && item?.mfhd.sequence_number === status\n          );\n        }) as Boxes.moof;\n        videoMoof.traf.tfhd.track_id = 1;\n        const videoData = videoMoof && (videoStream.boxs[videoStream.boxs.indexOf(videoMoof) + 1] as Boxes.mdat);\n        if (videoMoof && videoData) {\n          callWrite(videoMoof.raw);\n          callWrite(videoData.raw);\n          status += 1;\n          checkStream();\n        }\n      } else if (status > videoMaxIndex && status > audioMaxIndex) {\n        // end\n        status = -2;\n        // console.log(\"call close\", status, videoMaxIndex, audioMaxIndex);\n        // writer.releaseLock();\n        writer.close();\n      }\n    }\n  }\n\n  // 并行读取两个reader的数据\n  async function readerHandler(streamReader: ReadableStreamDefaultReader<any>, mp4Stream: Mp4Stream) {\n    while (true) {\n      const { done, value } = await streamReader.read();\n      if (value) {\n        mp4Stream.push(value);\n        mp4Stream.parse();\n\n        checkStream();\n      }\n      // 将value拼接到 chunk后\n\n      if (done) {\n        mp4Stream.end();\n        checkStream();\n        break;\n      }\n    }\n  }\n\n  readerHandler(videoReader, videoStream);\n  readerHandler(audioReader, audioStream);\n  return readable;\n}\n"],"names":["Mp4Box","buf","__publicField","value","size","bufs","item","boxRaw","base","nbuf","pos","val","view","s","i","boxPos","type","tBuf","BoxClass","Boxes","Boxes.free","trex","trun","tfdt","tfhd","traf","box","mfhd","udta","mdia","ftyp","free","moov","mvhd","mvex","trak","moof","sidx","offset","refrenceCount","resList","tmp_32","reference_type","referenced_size","subsegment_duration","starts_with_SAP","SAP_type","SAP_delta_time","mdat","newBuf","tkhd","edts","Mp4Stream","Boxes.sidx","Boxes.moov","sliceBuf","remux","vs","as","videoReader","audioReader","videoStream","audioStream","readable","writable","writer","status","callWrite","checkStream","videoMoov","audioMoov","videoMvex","audioMvex","videoTrex","audioTrex","videoTrak","audioTrak","videoMaxIndex","audioMaxIndex","videoMoof","Boxes.moof","audioMoof","videoData","audioData","videoTraf","audioTraf","audioTrafSize","videoMoofSize","videoDataSize","readerHandler","streamReader","mp4Stream","done"],"mappings":"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"}